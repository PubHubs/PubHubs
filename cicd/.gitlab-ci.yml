variables:
  DOCKER_DRIVER: overlay # faster docker builds, see https://gitlab.com/gitlab-org/gitlab-ce/issues/21374

before_script:
  - ENV_FILE="pubhubs/.${CI_COMMIT_REF_NAME}.env"
  - test -f ${ENV_FILE} && source ${ENV_FILE} # 'source ${ENV_FILE} || true' does not work on busybox

# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
stages: # List of stages for jobs, and their order of execution
  - build
  - build-images
  - deploy

.rustchanges: &rustchanges
  changes:
    - pubhubs/**/*
    - cicd/.gitlab-ci.yml

.phc_image_changes: &phc_image_changes
  changes:
    - pubhubs/**/*
    - global-client/**/* # global client is included in PHC image
    - hub-client/**/* # global client depends on hub-client
    - cicd/.gitlab-ci.yml

.anycodechanges: &anycodechanges
  changes:
    - pubhubs/**/*
    - global-client/**/*
    - hub-client/**/*
    - pubhubs_hub/**/*
    - start_test_setup.py
    - cicd/.gitlab-ci.yml

.globalclientchanges: &globalclientchanges
  changes:
    - global-client/**/*
    - hub-client/**/*
    - cicd/.gitlab-ci.yml

.hubclientchanges: &hubclientchanges
  changes:
    - hub-client/**/*
    - cicd/.gitlab-ci.yml

.hubchanges: &hubchanges
  changes:
    # NOTE: strictly speaking changes to pubhubs also affect a hub via libpubhubs.so,
    #       but that happens so seldomly that we better trigger a deploy in those cases manually
    - pubhubs_hub/**/*
    - cicd/.gitlab-ci.yml

rust-clippy:
  stage: build
  tags:
    - docker
  image: registry.science.ru.nl/ilab/docker-build/rust-nightly:main
  script:
    - cd pubhubs
    # twice, because sometimes clippy has hard errors, and won't produce the report
    - cargo +nightly clippy
    - cargo +nightly clippy --message-format=json | gitlab-report -p clippy > gl-code-quality-report.json
  artifacts:
    reports:
      codequality: pubhubs/gl-code-quality-report.json
    expire_in: 1 week
  rules:
    - if: "$CODE_QUALITY_DISABLED"
      when: never
    - if: '$CI_PIPELINE_SOURCE != "push"'
      when: never
    - *rustchanges
    - when: manual
  cache:
    key: "${CI_COMMIT_REF_NAME}-${CI_JOB_NAME}"
    paths:
      - pubhubs/target/

rust-unit-test:
  stage: build
  tags:
    - docker
  rules:
    - *rustchanges
    - when: manual
  image: registry.science.ru.nl/ilab/docker-build/pubhubs-rust-stable:main
  script:
    - cp -r global-client/ pubhubs
    - cp -r hub-client/ pubhubs
    - cd pubhubs
    #    No pretty reporting for now unfortunatly, see https://github.com/rust-lang/rust/issues/49359
    #    (more background:  https://github.com/rust-lang/rust/pull/109044), when JSON output is finalized let's turn reporting
    #    back on.
    #    - env RUST_BACKTRACE=full cargo +stable test --no-fail-fast -- -Z unstable-options --format json | gitlab-report -p test > report.xml
    - RUST_BACKTRACE=full RUSTFLAGS="-C link-arg=-fuse-ld=lld" RUSTDOCFLAGS="-C link-arg=-fuse-ld=lld" cargo +stable test --no-fail-fast
  artifacts:
    reports:
      junit: pubhubs/report.xml
    expire_in: 1 week
  cache:
    key: "${CI_COMMIT_REF_NAME}-${CI_JOB_NAME}"
    paths:
      - pubhubs/target/

rust-cargo-deny:
  stage: build
  rules:
    - *rustchanges
    - when: manual
  tags:
    - docker
  image: registry.science.ru.nl/ilab/docker-build/rust-stable:main
  script:
    - cd pubhubs
    - cargo deny check

build-pubhubs-image:
  stage: build-images
  rules:
    # don't run when branch is not main or stable
    - if: $CI_COMMIT_BRANCH != "main" && $CI_COMMIT_BRANCH != "stable"
      when: never
    # do run when any relevant files have changed
    - <<: *phc_image_changes
    # when no relevant changes have been made, don't run automatically, but allow the job to be rin manually
    - when: manual
  needs:
    - job: globalclient-format-check
      optional: true
    - job: globalclient-unit-test
      optional: true
    - job: rust-unit-test
      optional: true
    - job: rust-cargo-deny
      optional: true
    - job: rust-clippy
      optional: true

  tags:
    - docker
  image: docker:stable
  variables:
    CONTAINER_IMAGE: ${CI_REGISTRY}/${CI_PROJECT_PATH}/pubhubs:${CI_COMMIT_REF_NAME}
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build --build-arg "CARGO_FEATURES=${CARGO_FEATURES}" -f pubhubs/Dockerfile -t ${CONTAINER_IMAGE} .
    - docker push ${CONTAINER_IMAGE}

deploy-main-phc:
  stage: deploy
  rules:
    # don't run when branch is not main
    - if: $CI_COMMIT_BRANCH != "main"
      when: never
    # do run when any relevant files have changed
    - <<: *phc_image_changes
    # when no relevant changes have been made, don't run automatically, but allow the job to be rin manually
    - when: manual
  needs:
    - build-pubhubs-image
  environment: $CI_COMMIT_REF_NAME
  tags: [docker]
  image: ubuntu:rolling
  script:
    - cd pubhubs
    - apt update
    - apt install -y openssh-client
    - chmod 600 $ILAB_VM_TRIGGER_UPDATE_KEY
    - ssh -o UserKnownHostsFile=$ILAB_VM_TRIGGER_UPDATE_KNOWN_HOSTS $ILAB_VM_TRIGGER_UPDATE_USER@ph.ihub.ru.nl -i $ILAB_VM_TRIGGER_UPDATE_KEY docker-pubhubs-main

deploy-stable-phc:
  stage: deploy
  rules:
    # don't run when branch is not stable
    - if: $CI_COMMIT_BRANCH != "stable"
      when: never
    # do run when any relevant files have changed
    - <<: *phc_image_changes
    # when no relevant changes have been made, don't run automatically, but allow the job to be rin manually
    - when: manual
  needs:
    - build-pubhubs-image
  environment: $CI_COMMIT_REF_NAME
  tags: [docker]
  image: ubuntu:rolling
  script:
    - cd pubhubs
    - apt update
    - apt install -y openssh-client
    - chmod 600 $ILAB_VM_TRIGGER_UPDATE_KEY
    - ssh -o UserKnownHostsFile=$ILAB_VM_TRIGGER_UPDATE_KNOWN_HOSTS $ILAB_VM_TRIGGER_UPDATE_USER@ph.ihub.ru.nl -i $ILAB_VM_TRIGGER_UPDATE_KEY docker-pubhubs-stable

start-test-setup-unit-test:
  stage: build
  rules:
    - <<: *anycodechanges
    - when: manual
  tags:
    - docker
  image: python:latest
  variables:
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  script:
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - python3 start_test_setup.py test

hub-unit-test: # This job runs in the test stage.
  stage: build
  rules:
    - *hubchanges
    - when: manual
  tags:
    - docker
  image: python:latest
  variables:
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  before_script:
    - python --version # For debugging
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - pip install unittest-xml-reporting
    - apt update && apt install -y lsb-release
  script:
    - cd pubhubs_hub
    - pip install --upgrade -r requirements.txt
    - python -m xmlrunner discover -p '*_test.py' --output-file report.xml
    # Pip's cache doesn't store the python packages
    # https://pip.pypa.io/en/stable/reference/pip_install/#caching
    #
    # If you want to also cache the installed packages, you have to install
    # them in a virtualenv and cache it as well.
  cache:
    paths:
      - pubhubs_hub/.cache/pip
      - pubhubs_hub/venv/
  artifacts:
    reports:
      junit: pubhubs_hub/report.xml
    expire_in: 1 week

build-image-hub:
  stage: build-images
  rules:
    # don't run when branch is not stable or main
    - if: $CI_COMMIT_BRANCH != "stable" &&  $CI_COMMIT_BRANCH != "main"
      when: never
    # do run when any relevant files have changed
    - <<: *hubchanges
    # when no relevant changes have been made, don't run automatically, but allow the job to be rin manually
    - when: manual
  needs:
    - hub-unit-test
  tags:
    - docker
  image: docker:latest # docker:stable does not work, see https://gitlab.science.ru.nl/ilab/pubhubs_canonical/-/issues/228
  variables:
    CONTAINER_IMAGE: ${CI_REGISTRY}/${CI_PROJECT_PATH}/pubhubs_hub:${CI_COMMIT_REF_NAME}
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t ${CONTAINER_IMAGE} -f pubhubs_hub/Dockerfile .
    - docker push ${CONTAINER_IMAGE}

deploy-main-hub:
  stage: deploy
  rules:
    # don't run when branch is not main
    - if: $CI_COMMIT_BRANCH != "main"
      when: never
    # do run when any relevant files have changed
    - <<: *hubchanges
    # when no relevant changes have been made, don't run automatically, but allow the job to be rin manually
    - when: manual
  needs: &mainhubdeployneeds
    - build-image-hub
  environment: $CI_COMMIT_REF_NAME
  tags: [docker]
  image: registry.science.ru.nl/ilab/docker-build/ubuntu-iso:main
  script:
    - cd pubhubs_hub
    - chmod 600 $ILAB_VM_TRIGGER_UPDATE_KEY
    - ssh -o UserKnownHostsFile=$ILAB_VM_TRIGGER_UPDATE_KNOWN_HOSTS $ILAB_VM_TRIGGER_UPDATE_USER@ph.ihub.ru.nl -i $ILAB_VM_TRIGGER_UPDATE_KEY docker-testhub-matrix-main

deploy-stable-hub:
  stage: deploy
  rules:
    # don't run when branch is not stable
    - if: $CI_COMMIT_BRANCH != "stable"
      when: never
    # do run when any relevant files have changed
    - <<: *hubchanges
    # when no relevant changes have been made, don't run automatically, but allow the job to be rin manually
    - when: manual
  needs: *mainhubdeployneeds
  environment: $CI_COMMIT_REF_NAME
  tags: [docker]
  image: registry.science.ru.nl/ilab/docker-build/ubuntu-iso:main
  script:
    - cd pubhubs_hub
    - chmod 600 $ILAB_VM_TRIGGER_UPDATE_KEY
    - ssh -o UserKnownHostsFile=$ILAB_VM_TRIGGER_UPDATE_KNOWN_HOSTS $ILAB_VM_TRIGGER_UPDATE_USER@ph.ihub.ru.nl -i $ILAB_VM_TRIGGER_UPDATE_KEY docker-testhub-matrix-stable

globalclient-format-check:
  stage: build
  rules:
    - *globalclientchanges
    - when: manual
  tags: [docker]
  image: node:latest
  script:
    - cd global-client
    - npx prettier ./src --check --ignore-unknown --config ./package.json
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .npm/

hubclient-format-check:
  stage: build
  rules:
    - *hubclientchanges
    - when: manual
  tags: [docker]
  image: node:latest
  script:
    - cd hub-client
    - npx prettier ./src --check --ignore-unknown --config ./package.json
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .npm/

globalclient-unit-test:
  stage: build
  rules:
    - *globalclientchanges
    - when: manual
  tags: [docker]
  image: node:latest
  script:
    - cd hub-client
    - npm ci
    - cd ../global-client
    - npm ci --cache .npm --prefer-offline
    - npm run test
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .npm/

hubclient-unit-test:
  stage: build
  rules:
    - *hubclientchanges
    - when: manual
  tags: [docker]
  image: node:latest
  before_script:
    - cd hub-client
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run test
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .npm/

build-hubclient:
  stage: build-images
  rules:
    # don't run when branch is not main or stable
    - if: $CI_COMMIT_BRANCH != "main" && $CI_COMMIT_BRANCH != "stable"
      when: never
    # do run when any relevant files have changed
    - <<: *hubclientchanges
    # when no relevant changes have been made, don't run automatically, but allow the job to be rin manually
    - when: manual
  needs:
    - hubclient-format-check
    - hubclient-unit-test
  tags:
    - docker
  image: docker:stable
  variables:
    CONTAINER_IMAGE: ${CI_REGISTRY}/${CI_PROJECT_PATH}/pubhubs_client:${CI_COMMIT_REF_NAME}
  script:
    - cd hub-client
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - DOCKER_BUILDKIT=1 docker build -t ${CONTAINER_IMAGE} .
    - docker push ${CONTAINER_IMAGE}

build-hubclient2:
  stage: build-images
  rules:
    # don't run when branch is not main
    - if: $CI_COMMIT_BRANCH != "main"
      when: never
    # do run when any relevant files have changed
    - <<: *hubclientchanges
    # when no relevant changes have been made, don't run automatically, but allow the job to be rin manually
    - when: manual
  needs:
    - hubclient-format-check
    - hubclient-unit-test
  tags:
    - docker
  image: docker:stable
  variables:
    CONTAINER_IMAGE: ${CI_REGISTRY}/${CI_PROJECT_PATH}/pubhubs_client2:${CI_COMMIT_REF_NAME}
  script:
    - cd hub-client
    - cp ../cicd/temp_testhub/logo.svg public/img/logo.svg
    - cp ../cicd/temp_testhub/logo.svg src/assets/pubhubs-logo.svg
    - cp ../cicd/temp_testhub/logo.svg src/assets/pubhubs-logo-dark.svg
    - cp ../cicd/temp_testhub/branding.css src/assets/branding.css
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - DOCKER_BUILDKIT=1 docker build -t ${CONTAINER_IMAGE} .
    - docker push ${CONTAINER_IMAGE}

deploy-main-hubclient:
  stage: deploy
  rules:
    # don't run when branch is not main
    - if: $CI_COMMIT_BRANCH != "main"
      when: never
    # do run when any relevant files have changed
    - <<: *hubclientchanges
    # when no relevant changes have been made, don't run automatically, but allow the job to be rin manually
    - when: manual
  needs: &deployhubclientneeds
    - build-hubclient
    - job: build-hubclient2
      optional: true
  environment: $CI_COMMIT_REF_NAME
  tags: [docker]
  image: registry.science.ru.nl/ilab/docker-build/ubuntu-iso:main
  script:
    - cd hub-client
    - chmod 600 $ILAB_VM_TRIGGER_UPDATE_KEY
    - ssh -o UserKnownHostsFile=$ILAB_VM_TRIGGER_UPDATE_KNOWN_HOSTS $ILAB_VM_TRIGGER_UPDATE_USER@ph.ihub.ru.nl -i $ILAB_VM_TRIGGER_UPDATE_KEY docker-testhub-client-main
    - ssh -o UserKnownHostsFile=$ILAB_VM_TRIGGER_UPDATE_KNOWN_HOSTS $ILAB_VM_TRIGGER_UPDATE_USER@ph.ihub.ru.nl -i $ILAB_VM_TRIGGER_UPDATE_KEY docker-testhub2-client-main

deploy-stable-client:
  stage: deploy
  rules:
    # don't run when branch is not stab,e
    - if: $CI_COMMIT_BRANCH != "stable"
      when: never
    # do run when any relevant files have changed
    - <<: *hubclientchanges
    # when no relevant changes have been made, don't run automatically, but allow the job to be rin manually
    - when: manual
  needs: *deployhubclientneeds
  environment: $CI_COMMIT_REF_NAME
  tags: [docker]
  image: registry.science.ru.nl/ilab/docker-build/ubuntu-iso:main
  script:
    - cd hub-client
    - chmod 600 $ILAB_VM_TRIGGER_UPDATE_KEY
    - ssh -o UserKnownHostsFile=$ILAB_VM_TRIGGER_UPDATE_KNOWN_HOSTS $ILAB_VM_TRIGGER_UPDATE_USER@ph.ihub.ru.nl -i $ILAB_VM_TRIGGER_UPDATE_KEY docker-testhub-client-stable

set-blueprints:
  stage: build
  rules:
    # don't run when branch is not main
    - if: $CI_COMMIT_BRANCH != "main"
      when: never
    # do run when any relevant files have changed
    - changes:
        - docs/blueprints/**/*
        - cicd/.gitlab-ci.yml
    # when no relevant changes have been made, don't run automatically, but allow the job to be rin manually
    - when: manual
  tags: [docker]
  image: registry.gitlab.com/islandoftex/images/texlive:latest
  script:
    - cd docs/blueprints
    - arara main
  artifacts:
    paths:
      - ./docs/blueprints/main.pdf
