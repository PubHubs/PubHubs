[package]
name = "pubhubs"
edition = "2024"
license-file = "../LICENSE"
rust-version = "1.88"

[lib]
crate-type = ["cdylib","rlib"]
# NOTE: the cdylib generates the libpubhubs.so (on Linux)  that's used by the hub

[[bin]]
name = "pubhubs"
required-features = ["bin"]

[[test]]
name = "integration"
required-features = ["bin"]

[features]
# bin:     what's used by the pubhubs binary
# abi:     what's needed for the ABI (libpubhubs.so) used by the hub
# common:  what's used by both bin and abi.
# old:     what's used by the old pubhubs library (no separate authentication server/transcryptor)
default = [
	"old", "bin",
]
abi = [
	"common",
]
common = [
	"dep:base16ct",
	"dep:curve25519-dalek",
	"dep:rand",
	"dep:aead",
	"dep:subtle",
	"dep:digest",
	"dep:typenum",
	"dep:sha2",
	"dep:zeroize",
]
bin = [
	"common",
	"dep:actix-web",
	"dep:actix-cors",
	"dep:anyhow",
	"dep:awc",
	"dep:base64ct",
	"dep:bytes",
	"dep:chacha20poly1305",
	"dep:clap",
	"dep:ed25519-dalek",
	"dep:env_logger",
	"dep:futures",
	"dep:futures-util", # used by actix already
	"dep:hmac",
	"dep:http",
	"dep:mime",
	"dep:humantime",
	"dep:indexmap",
	"dep:log",
	"dep:object_store",
	"dep:postcard",
	"dep:regex",
	"dep:rsa",
	"dep:serde",
	"dep:serde_bytes",
	"dep:serde_json",
	"dep:serde_repr",
	"dep:thiserror",
	"dep:tokio",
	"dep:toml",
	"dep:url",
	"dep:zeroize",
	"dep:qrcode",
]
real_credentials = []
old = [
 	"bin",
	"dep:actix-files",
	"dep:async-recursion",
	"dep:chrono",
	"dep:expry",
	"dep:hairy",
	"dep:hyper",
	"dep:hyper-tls",
	"dep:jsonwebtoken",
	"dep:prometheus",
	"dep:rusqlite",
	"dep:serde_urlencoded",
	"dep:serde_yaml",
	"dep:strum_macros",
	"dep:uuid",
	"dep:urlencoding",
]

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html
[dependencies]
# Error handling
# note:  anyhow is also used by cargo
anyhow = { version = "1.0", features = ["backtrace"], optional = true }
thiserror = { version="2.0", optional = true }

# time
humantime = { version = "2.2", optional = true }

# serde
serde = { version = "1.0", features = ["derive"], optional = true }
serde_repr = { version = "0.1", optional = true }
serde_bytes = { version = "0.11", optional = true }
serde_json = { version = "1.0", optional = true }
serde_urlencoded = { version = "0.7", optional = true }
serde_yaml = { version = "0.9", optional = true }
toml = { version = "0.9", optional = true }
postcard = { version = "1.1", features = [ "use-std" ],  optional = true }

urlencoding = { version = "2.1", optional = true }

# better hashmap/hashset, supported by serde_json & toml
indexmap = { version = "2.7", features = [ "serde" ], optional = true }

# Database interaction
rand = { version = "0.9", optional = true } 
rusqlite = { version = "0.37", features = ["bundled"], optional = true }
# note: object_store is used by crates.io
object_store = { version = "0.12", optional = true } 

# Yivi interaction
async-recursion = { version = "1.1", optional = true }
chrono = { version="0.4", default-features = false, features = ["clock"], optional = true }
# note: we don't use chrono 0.4's default features, because it includes oldtime,
#       which pulls in time 0.1, which has a vulnerability (viz. RUSTSEC-2020-0071)
qrcode = { version = "0.14", optional = true }
regex = { version = "1.11", optional = true }

# Web dependencies
actix-web = { version = "4.9", optional = true }
actix-cors = { version = "0.7", optional = true }
actix-files = { version = "0.6", optional = true }
bytes = { version = "1", features = ["serde"], optional = true }
env_logger = { version = "0.11.5", optional = true }
http = { version = "0.2", optional = true }
mime = { version = "0.3", optional = true }
hyper = { version= "0.14", features= ["server", "client", "http1", "stream" ], optional = true }
hyper-tls = { version = "0.5", optional = true }
jsonwebtoken = { version = "9", optional = true }  # uses non RustCrypto - perhaps replace?
log = { version = "0.4", optional = true }
tokio = { version = "1.41", features = ["rt", "macros", "rt-multi-thread", "sync", "time"], optional = true }
url = { version="2.5", features=["serde"], optional = true }
uuid = { version = "1.11", features = ["v4"], optional = true }

# Proxying requests to Yivi and connection check
awc = { version = "3.6", features = ["openssl"], optional = true }

# RustCrypto packages
aead = { version = "0.5", features=["getrandom"], optional = true }
base16ct = { version = "0.2", features = ["alloc", "std"], optional = true } # hex
base64ct = { version = "1.6", features = ["alloc", "std"], optional = true }
chacha20poly1305 = { version = "0.10", optional = true }
curve25519-dalek = { version = "4.1.3", features = ["rand_core", "digest", "serde", "zeroize"], optional = true }
ed25519-dalek = { version = "2.1", features = ["rand_core", "serde"], optional = true }
rsa = { version = "0.9", features = ["sha2"], optional = true }
hmac = { version = "0.12", optional = true }
zeroize = { version = "1.8", features = [ "zeroize_derive" ], optional = true }
sha2 = { version = "0.10", optional = true }
subtle = { version = "2.6", optional = true }
typenum = { version = "1.17", optional = true }
digest = { version = "0", optional = true }

#metrics
futures = { version = "0.3", optional = true }
futures-util = { version = "0.3", optional = true }
prometheus = { version = "0.14", default-features = false, optional = true }
strum_macros = { version = "0.27", optional = true }

#iLab crates
# NOTE: Versions 0.2.1 for expry and hairy are available, but are rather non-backwards compatible.
expry = { version = "0.1", optional = true }
hairy = { version = "0.1", optional = true }

# command line argument parser
clap = { version = "4.5", features = ["derive"], optional = true }


[dev-dependencies]
tempfile = "3.14"
tokio-test = "0.4"
